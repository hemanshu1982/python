The lower() method is particularly useful for storing data. Many times you won’t want to trust the capitalization that your users provide, so you’ll convert strings to lowercase before storing them. Then when you want to display the information, you’ll use the case that makes the most sense for each string.

To insert a variable’s value into a string, place the letter f immediately before the opening quotation mark ➊. Put braces around the name or names of any variable you want to use inside the string. Python will replace each variable with its value when the string is displayed. Example:
   first_name = "ada"
   last_name = "lovelace"
➊ full_name = f"{first_name} {last_name}"
   print(full_name)

You can also combine tabs and newlines in a single string. The string "\n\t" tells Python to move to a new line, and start the next line with a tab. The following example shows how you can use a one-line string to generate four lines of output:
>>> print("Languages:\n\tPython\n\tC\n\tJavaScript")
Languages:
    Python
    C
    JavaScript

➊ >>> favorite_language = ' python '
➋ >>> favorite_language.rstrip()
   ' python'
➌ >>> favorite_language.lstrip()
   'python '
➍ >>> favorite_language.strip()
   'python'

   A constant is like a variable whose value stays the same throughout the life of a program. Python doesn’t have built-in constant types, but Python programmers use all capital letters to indicate a variable should be treated as a constant and never be changed:
   MAX_CONNECTIONS = 5000

The Zen of Python, by Tim Peters
=====
Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those! 
